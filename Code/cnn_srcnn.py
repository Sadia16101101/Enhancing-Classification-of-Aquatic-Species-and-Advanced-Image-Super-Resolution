# -*- coding: utf-8 -*-
"""CNN_srcnn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IM1gEwp5qD8noukgNxWxfkLLUwPwA_Xt
"""

from google.colab import drive
drive.mount('/content/drive')

path_to_invasive = '/content/drive/MyDrive/SRCNN/output'
path_to_non_invasive = '/content/drive/MyDrive/SRCNN/output_non'

import os
import numpy as np
from keras.preprocessing.image import load_img, img_to_array
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

def load_images_and_labels(image_paths, label):
    images = []
    labels = []
    try:
        if not os.path.exists(image_paths):
            print(f"Path does not exist: {image_paths}")
            return np.array([]), np.array([])

        file_names = os.listdir(image_paths)
        if not file_names:
            print("Directory is empty:", image_paths)
            return np.array([]), np.array([])

        for image_path in file_names:
            full_path = os.path.join(image_paths, image_path)
            print("Loading:", full_path)  # Debug: Print the path of each image being loaded
            img = load_img(full_path, target_size=(32, 32))
            img = img_to_array(img)
            images.append(img)
            labels.append(label)
    except Exception as e:
        print(f"Error loading images: {e}")
    return np.array(images), np.array(labels)

# Check if directories are accessible
print("Checking directories...")
print(os.listdir('/content/drive/MyDrive/SRCNN/water'))

x_invasive, y_invasive = load_images_and_labels(path_to_invasive, 1)
x_non_invasive, y_non_invasive = load_images_and_labels(path_to_non_invasive, 0)

# Concatenate invasive and non-invasive data
x = np.concatenate((x_invasive, x_non_invasive), axis=0)
y = np.concatenate((y_invasive, y_non_invasive), axis=0)

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Normalize the data
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# One-hot encode the labels
y_train = to_categorical(y_train, num_classes=2)
y_test = to_categorical(y_test, num_classes=2)

# Build the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(2, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print(f'Test accuracy: {accuracy:.4f}')